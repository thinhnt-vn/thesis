/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hust.soict.bkstorage.gui;

import hust.soict.bkstorage.bll.ConfigBll;
import hust.soict.bkstorage.bll.LoginBll;
import hust.soict.bkstorage.bll.MainBll;
import hust.soict.bkstorage.bll.WizardBll;
import hust.soict.bkstorage.constants.FileConstant;
import hust.soict.bkstorage.exception.DownloadExeption;
import hust.soict.bkstorage.exception.FileEmptyException;
import hust.soict.bkstorage.exception.LoginFailException;
import hust.soict.bkstorage.exception.TextFieldEmptyException;
import hust.soict.bkstorage.utils.FileUtil;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author BSH
 */
public class ConfigGui extends javax.swing.JFrame {

    /**
     * Creates new form ConfigGui
     */
    public ConfigGui() {
        initComponents();
        setIconImage(new ImageIcon(FileConstant.ICON_DIR + "\\"
                + FileConstant.CONFIG_ICON_FILE_NAME).getImage());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        serverNameLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        serverNameTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        stateLabel = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cấu hình");

        serverNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serverNameLabel.setText("Tên máy chủ:");

        portLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        portLabel.setText("Cổng:");

        serverNameTextField.setText("localhost");

        portTextField.setText("8888");

        connectButton.setText("Kết nối");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        stateLabel.setForeground(new java.awt.Color(204, 0, 0));
        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(serverNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(portLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(serverNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {portLabel, serverNameLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverNameLabel)
                    .addComponent(serverNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(connectButton)
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {portLabel, serverNameLabel});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {portTextField, stateLabel});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        String serverName = serverNameTextField.getText();
        String port = portTextField.getText();

//        try {
        ConfigBll configBll = new ConfigBll(serverName, port);
        try {   // Kết nối
            configBll.connect();
        } catch (TextFieldEmptyException | NumberFormatException ex) {
            stateLabel.setText(ex.getMessage());
            return;
        } catch (RemoteException | NotBoundException ex) {
            stateLabel.setText(ex.getMessage());
//            stateLabel.setText("Lỗi kết nối!");
            return;
        }

        try {   // Nếu kết nối thử thành công thì lưu thông số hiển thị form đăng nhập
            configBll.save();
        } catch (IOException ex) {
            stateLabel.setText("Không thể ghi xuống đĩa!");
            return;
        }

        // Thử đăng nhập
        WizardBll wizardBll = new WizardBll();
        String userName;
        try {
            userName = wizardBll.readUserName();
            String password = wizardBll.readPassword();
            new LoginBll(userName, password).login();
        } catch (FileEmptyException | IOException | LoginFailException ex) {
            dispose();
            new LoginGui().setVisible(true);
            return;
        }

        // Tạo thư mục của người dùng và tải dữ liệu nếu chưa tồn tại
        if (FileUtil.makeUserDirectory()) {
            try {
                new MainBll().downloadAll();
            } catch (DownloadExeption ex) {
                // Xóa thư mục
                FileUtil.delete(FileUtil.getUserDirectory());
                stateLabel.setText(ex.getMessage());
                return;
            }
        }

        // Đăng nhập thành công -> hiện form chính
        dispose();
        try {
            new MainBll().downloadAll();
        } catch (DownloadExeption ex) {
            JOptionPane.showMessageDialog(null, "Không tải được dữ liệu!",
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            FileUtil.delete(FileUtil.getUserDirectory());
            new LoginGui().setVisible(true);
            return;
        }
        new MainGui().setVisible(true);
    }//GEN-LAST:event_connectButtonActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ConfigGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ConfigGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ConfigGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ConfigGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ConfigGui().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JTextField serverNameTextField;
    private javax.swing.JLabel stateLabel;
    // End of variables declaration//GEN-END:variables
}